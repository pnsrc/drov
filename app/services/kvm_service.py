import platform
import json
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç libvirt —Ç–æ–ª—å–∫–æ –¥–ª—è Linux
try:
    import libvirt  # type: ignore
    import xml.etree.ElementTree as ET
    LIBVIRT_AVAILABLE = True
except ImportError:
    LIBVIRT_AVAILABLE = False
    libvirt = None  # type: ignore

from app.core.config import settings


class KVMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KVM —á–µ—Ä–µ–∑ libvirt –∏–ª–∏ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ"""
    
    def __init__(self):
        self.conn = None
        self.demo_mode = not LIBVIRT_AVAILABLE or platform.system() != "Linux"
        
        if not self.demo_mode:
            self.connect()
        else:
            print("üé≠ –ó–∞–ø—É—Å–∫ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ (libvirt –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ libvirt"""
        if self.demo_mode:
            return
            
        try:
            self.conn = libvirt.open(settings.LIBVIRT_URI)
            if self.conn is None:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ libvirt")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º: {e}")
            self.demo_mode = True

    def get_all_vms(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ú"""
        if self.demo_mode:
            return self._get_demo_vms()
            
        try:
            vms = []
            # –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            for vm_id in self.conn.listDomainsID():
                domain = self.conn.lookupByID(vm_id)
                vms.append(self._domain_to_dict(domain))
            
            # –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            for vm_name in self.conn.listDefinedDomains():
                domain = self.conn.lookupByName(vm_name)
                vms.append(self._domain_to_dict(domain))
            
            return vms
        except Exception as e:
            return []

    def get_vm_info(self, vm_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–ú"""
        if self.demo_mode:
            vms = self._get_demo_vms()
            for vm in vms:
                if vm["name"] == vm_name:
                    return vm
            return None
            
        try:
            domain = self.conn.lookupByName(vm_name)
            return self._domain_to_dict(domain)
        except Exception as e:
            return None

    def start_vm(self, vm_name: str) -> Dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –í–ú"""
        if self.demo_mode:
            return self._demo_vm_action(vm_name, "start")
            
        try:
            domain = self.conn.lookupByName(vm_name)
            if domain.isActive():
                return {"success": False, "message": "–í–ú —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞"}
            
            domain.create()
            return {"success": True, "message": f"–í–ú {vm_name} –∑–∞–ø—É—â–µ–Ω–∞"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –í–ú: {e}"}

    def stop_vm(self, vm_name: str) -> Dict:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–ú"""
        if self.demo_mode:
            return self._demo_vm_action(vm_name, "stop")
            
        try:
            domain = self.conn.lookupByName(vm_name)
            if not domain.isActive():
                return {"success": False, "message": "–í–ú —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
            
            domain.shutdown()
            return {"success": True, "message": f"–í–ú {vm_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –í–ú: {e}"}

    def force_stop_vm(self, vm_name: str) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–ú"""
        if self.demo_mode:
            return self._demo_vm_action(vm_name, "force_stop")
            
        try:
            domain = self.conn.lookupByName(vm_name)
            domain.destroy()
            return {"success": True, "message": f"–í–ú {vm_name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –í–ú: {e}"}

    def restart_vm(self, vm_name: str) -> Dict:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –í–ú"""
        if self.demo_mode:
            return self._demo_vm_action(vm_name, "restart")
            
        try:
            domain = self.conn.lookupByName(vm_name)
            domain.reboot()
            return {"success": True, "message": f"–í–ú {vm_name} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –í–ú: {e}"}

    def delete_vm(self, vm_name: str) -> Dict:
        """–£–¥–∞–ª–∏—Ç—å –í–ú"""
        if self.demo_mode:
            return self._demo_vm_action(vm_name, "delete")
            
        try:
            domain = self.conn.lookupByName(vm_name)
            
            if domain.isActive():
                domain.destroy()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –¥–∏—Å–∫–∞–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            xml_desc = domain.XMLDesc(0)
            root = ET.fromstring(xml_desc)
            
            disks = []
            for disk in root.findall(".//devices/disk[@type='file']"):
                source = disk.find("source")
                if source is not None and "file" in source.attrib:
                    disks.append(source.attrib["file"])
            
            # –£–¥–∞–ª—è–µ–º –¥–æ–º–µ–Ω
            domain.undefine()
            
            # –£–¥–∞–ª—è–µ–º –¥–∏—Å–∫–∏
            for disk_path in disks:
                try:
                    Path(disk_path).unlink()
                except:
                    pass
            
            return {"success": True, "message": f"–í–ú {vm_name} —É–¥–∞–ª–µ–Ω–∞"}
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –í–ú: {e}"}

    def create_vm(self, vm_config: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –í–ú"""
        if self.demo_mode:
            return self._demo_vm_action(vm_config.get("name", "demo-vm"), "create")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            required_fields = ['name', 'memory', 'vcpus', 'disk_size']
            for field in required_fields:
                if field not in vm_config:
                    return {"success": False, "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"}
            
            vm_name = vm_config['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –í–ú —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                existing = self.conn.lookupByName(vm_name)
                return {"success": False, "message": f"–í–ú —Å –∏–º–µ–Ω–µ–º '{vm_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
            except libvirt.libvirtError:
                pass  # –í–ú –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–∫ –¥–ª—è –í–ú
            disk_path = Path(settings.VM_STORAGE_PATH) / f"{vm_name}.qcow2"
            disk_size = vm_config['disk_size']
            
            # –°–æ–∑–¥–∞–µ–º qcow2 –¥–∏—Å–∫
            create_disk_cmd = f"qemu-img create -f qcow2 {disk_path} {disk_size}G"
            import subprocess
            result = subprocess.run(create_disk_cmd.split(), capture_output=True, text=True)
            if result.returncode != 0:
                return {"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Å–∫–∞: {result.stderr}"}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            xml_config = self._generate_vm_xml_with_iso(vm_config, str(disk_path))
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω –≤ libvirt
            domain = self.conn.defineXML(xml_config)
            
            return {
                "success": True, 
                "message": f"–í–ú '{vm_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "vm_name": vm_name,
                "disk_path": str(disk_path)
            }
            
        except Exception as e:
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ú: {str(e)}"}
    
    def _generate_vm_xml_with_iso(self, config: Dict, disk_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –í–ú —Å ISO"""
        vm_name = config['name']
        memory_mb = config['memory']
        vcpus = config['vcpus']
        iso_path = config.get('iso_path', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        arch = "x86_64"
        machine = "pc-i440fx-2.12" if platform.machine() == "x86_64" else "q35"
        
        # –ë–∞–∑–æ–≤–∞—è XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        xml = f"""<domain type='kvm'>
  <name>{vm_name}</name>
  <uuid>{self._generate_uuid()}</uuid>
  <memory unit='MiB'>{memory_mb}</memory>
  <currentMemory unit='MiB'>{memory_mb}</currentMemory>
  <vcpu placement='static'>{vcpus}</vcpu>
  <os>
    <type arch='{arch}' machine='{machine}'>hvm</type>
    <boot dev='cdrom'/>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <cpu mode='host-passthrough' check='none'/>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    
    <!-- –ì–ª–∞–≤–Ω—ã–π –¥–∏—Å–∫ -->
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='{disk_path}'/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </disk>"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º CD-ROM —Å ISO –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if iso_path and Path(iso_path).exists():
            xml += f"""
    
    <!-- CD-ROM —Å ISO –æ–±—Ä–∞–∑–æ–º -->
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='{iso_path}'/>
      <target dev='hdb' bus='ide'/>
      <readonly/>
      <address type='drive' controller='0' bus='0' target='0' unit='1'/>
    </disk>"""
        
        xml += f"""
    
    <!-- IDE –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è CD-ROM -->
    <controller type='ide' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    
    <!-- PCI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã -->
    <controller type='pci' index='0' model='pci-root'/>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </controller>
    
    <!-- –°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å -->
    <interface type='network'>
      <source network='default'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    
    <!-- VNC –∫–æ–Ω—Å–æ–ª—å -->
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
    
    <!-- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ -->
    <video>
      <model type='cirrus' vram='16384' heads='1' primary='yes'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    
    <!-- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å -->
    <input type='tablet' bus='usb'>
      <address type='usb' bus='0' port='1'/>
    </input>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    
    <!-- USB –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä -->
    <controller type='usb' index='0' model='ich9-ehci1'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x7'/>
    </controller>
    
    <!-- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ -->
    <serial type='pty'>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    
    <!-- –ö–∞–Ω–∞–ª –¥–ª—è QEMU guest agent -->
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='1'/>
    </channel>
    
  </devices>
</domain>"""
        
        return xml
    
    def _generate_uuid(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –í–ú"""
        import uuid
        return str(uuid.uuid4())

    def _domain_to_dict(self, domain) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å libvirt –¥–æ–º–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å"""
        if not LIBVIRT_AVAILABLE:
            return {}
            
        try:
            info = domain.info()
            return {
                "id": domain.ID() if domain.isActive() else None,
                "name": domain.name(),
                "status": "running" if domain.isActive() else "stopped",
                "memory": info[1],  # maxMemory –≤ KB
                "vcpus": info[3],   # —á–∏—Å–ª–æ CPU
                "cpu_time": info[4],  # CPU –≤—Ä–µ–º—è
                "state": info[0]    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞
            }
        except Exception:
            return {}

    def _generate_vm_xml(self, config: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –í–ú"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return f'''
        <domain type='kvm'>
            <name>{config["name"]}</name>
            <memory unit='MB'>{config.get("memory", 1024)}</memory>
            <vcpu>{config.get("vcpus", 1)}</vcpu>
            <os>
                <type arch='x86_64' machine='pc'>hvm</type>
                <boot dev='hd'/>
            </os>
        </domain>
        '''

    # –î–µ–º–æ-–º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ libvirt
    def _get_demo_vms(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ-—Å–ø–∏—Å–æ–∫ –í–ú"""
        demo_file = Path("data/demo_vms.json")
        if demo_file.exists():
            try:
                with open(demo_file, encoding="utf-8") as f:
                    return json.load(f)
            except:
                pass
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return [
            {
                "id": "demo-vm-1",
                "name": "Ubuntu-Demo",
                "status": "running",
                "memory": 2048,
                "vcpus": 2,
                "disk_size": "20G",
                "ip_address": "192.168.122.100",
                "os": "Ubuntu 22.04 (–¥–µ–º–æ)",
                "created": datetime.now().isoformat(),
                "uptime": "Demo mode"
            },
            {
                "id": "demo-vm-2", 
                "name": "CentOS-Demo",
                "status": "stopped",
                "memory": 1024,
                "vcpus": 1,
                "disk_size": "15G",
                "ip_address": "192.168.122.101",
                "os": "CentOS Stream 9 (–¥–µ–º–æ)",
                "created": datetime.now().isoformat(),
                "uptime": "0"
            }
        ]
    
    def _demo_vm_action(self, vm_name: str, action: str) -> Dict:
        """–≠–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –í–ú –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ"""
        return {
            "success": True,
            "message": f"–î–µ–º–æ: {action} –¥–ª—è –í–ú {vm_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
            "vm_name": vm_name,
            "action": action,
            "demo_mode": True
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
kvm_service = KVMService()
