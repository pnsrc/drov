#!/usr/bin/env python3
"""
KVM Web Platform - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

try:
    import uvicorn
    from fastapi import FastAPI
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.staticfiles import StaticFiles
    from fastapi.responses import HTMLResponse, FileResponse
    FASTAPI_AVAILABLE = True
except ImportError:
    print("‚ùå FastAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install fastapi uvicorn")
    FASTAPI_AVAILABLE = False
    sys.exit(1)

from app.core.config import settings


def create_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        title="KVM Web Platform",
        description="–í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è KVM –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏",
        version="1.0.0"
    )

    # CORS configuration
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Static files (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
    app.mount("/static", StaticFiles(directory="static"), name="static")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤
    try:
        from app.api.routes import router as api_router
        app.include_router(api_router, prefix="/api")
    except ImportError as e:
        print(f"‚ö†Ô∏è  API —Ä–æ—É—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {e}")

    @app.get("/")
    async def root():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        try:
            with open("static/index.html", "r", encoding="utf-8") as f:
                content = f.read()
            return HTMLResponse(content=content)
        except FileNotFoundError:
            return {"message": "KVM Web Platform API", "version": "1.0.0"}

    @app.get("/health")
    async def health():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return {"status": "ok", "platform": "KVM Web Platform"}

    return app


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ KVM Web Platform...")
    print(f"üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {os.uname().sysname} {os.uname().machine}")
    
    print(f"üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{settings.HOST}:{settings.PORT}")
    print("üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:", Path("static").absolute())
    print("üíæ –î–∞–Ω–Ω—ã–µ:", settings.DATA_DIR)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å import string –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ reload
    if settings.DEBUG:
        uvicorn.run(
            "main:create_app",  # Import string instead of app object
            host=settings.HOST,
            port=settings.PORT,
            reload=True,
            factory=True  # Indicates that create_app is a factory function
        )
    else:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        app = create_app()
        uvicorn.run(
            app,
            host=settings.HOST,
            port=settings.PORT,
            reload=False
        )


if __name__ == "__main__":
    main()
