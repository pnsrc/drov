#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ KVM Web Platform
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import json
import os
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import threading
import webbrowser

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent))

from app.services.kvm_service import kvm_service
from app.core.config import settings


class KVMWebHandler(SimpleHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è KVM Web Platform"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory="static", **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        
        print(f"üì® GET {path}")
        
        # API endpoints
        if path.startswith('/api/'):
            self.handle_api_get(path)
        elif path == '/':
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            self.serve_index()
        else:
            # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        
        print(f"üì® POST {path}")
        
        if path.startswith('/api/'):
            self.handle_api_post(path)
        else:
            self.send_error(404, "Endpoint not found")
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        
        print(f"üì® DELETE {path}")
        
        if path.startswith('/api/'):
            self.handle_api_delete(path)
        else:
            self.send_error(404, "Endpoint not found")
    
    def handle_api_get(self, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            if path == '/api/vms':
                # –°–ø–∏—Å–æ–∫ –í–ú
                vms = kvm_service.get_all_vms()
                self.send_json_response(vms)
            
            elif path.startswith('/api/vms/') and path.endswith('/console/viewer'):
                # VNC –∫–æ–Ω—Å–æ–ª—å
                vm_name = path.split('/')[3]
                html_content = self.get_console_html(vm_name)
                self.send_html_response(html_content)
            
            elif path.startswith('/api/vms/') and not '/' in path[10:]:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –í–ú
                vm_name = path.split('/')[3]
                vm = kvm_service.get_vm_info(vm_name)
                if vm:
                    self.send_json_response(vm)
                else:
                    self.send_error(404, "VM not found")
            
            elif path == '/api/host/stats':
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–æ—Å—Ç–∞
                stats = self.get_host_stats()
                self.send_json_response(stats)
            
            elif path == '/api/':
                # API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                info = {
                    "name": "KVM Web Platform API",
                    "version": "1.0.0",
                    "demo_mode": kvm_service.demo_mode,
                    "endpoints": {
                        "vms": "/api/vms",
                        "host_stats": "/api/host/stats"
                    }
                }
                self.send_json_response(info)
            
            else:
                self.send_error(404, "API endpoint not found")
                
        except Exception as e:
            self.send_error(500, str(e))
    
    def handle_api_post(self, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            if '/start' in path:
                vm_name = path.split('/')[3]
                result = kvm_service.start_vm(vm_name)
                self.send_json_response(result)
            
            elif '/stop' in path:
                vm_name = path.split('/')[3]
                result = kvm_service.stop_vm(vm_name)
                self.send_json_response(result)
            
            elif '/restart' in path:
                vm_name = path.split('/')[3]
                result = kvm_service.restart_vm(vm_name)
                self.send_json_response(result)
            
            else:
                self.send_error(404, "API endpoint not found")
                
        except Exception as e:
            self.send_error(500, str(e))
    
    def handle_api_delete(self, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            if path.startswith('/api/vms/'):
                vm_name = path.split('/')[3]
                result = kvm_service.delete_vm(vm_name)
                self.send_json_response(result)
            else:
                self.send_error(404, "API endpoint not found")
                
        except Exception as e:
            self.send_error(500, str(e))
    
    def send_json_response(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        json_data = json.dumps(data, ensure_ascii=False, indent=2)
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json_data.encode('utf-8'))
    
    def send_html_response(self, html):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ HTML –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def serve_index(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            with open('static/index.html', 'r', encoding='utf-8') as f:
                content = f.read()
            self.send_html_response(content)
        except FileNotFoundError:
            error_html = """
            <html>
            <head><title>KVM Web Platform</title></head>
            <body>
                <h1>üöÄ KVM Web Platform</h1>
                <p>–§–∞–π–ª static/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
                <p><a href="/api/">API Documentation</a></p>
            </body>
            </html>
            """
            self.send_html_response(error_html)
    
    def get_console_html(self, vm_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –í–ú"""
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Console - {vm_name}</title>
            <meta charset="utf-8">
            <style>
                body {{ 
                    margin: 0; 
                    padding: 20px; 
                    background: #2c3e50; 
                    color: white;
                    font-family: 'Courier New', monospace;
                }}
                .console {{ 
                    background: black; 
                    padding: 20px; 
                    border-radius: 5px;
                    border: 2px solid #34495e;
                    min-height: 400px;
                }}
                .status {{
                    background: #34495e;
                    padding: 10px;
                    border-radius: 5px;
                    margin-bottom: 20px;
                }}
            </style>
        </head>
        <body>
            <div class="status">
                <h2>üñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å –í–ú: {vm_name}</h2>
                <p>üì∫ –î–µ–º–æ-–∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã</p>
            </div>
            
            <div class="console">
                <p style="color: #2ecc71;">KVM Web Platform - –î–µ–º–æ –∫–æ–Ω—Å–æ–ª—å</p>
                <p style="color: #3498db;">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ: {vm_name}</p>
                <p style="color: #e74c3c;">‚ö†Ô∏è  –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç VNC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</p>
                <br>
                <p style="color: #f39c12;">Ubuntu 22.04.3 LTS {vm_name} tty1</p>
                <br>
                <p style="color: #2ecc71;">{vm_name} login: <span style="animation: blink 1s infinite;">_</span></p>
            </div>
            
            <style>
                @keyframes blink {{
                    0%, 50% {{ opacity: 1; }}
                    51%, 100% {{ opacity: 0; }}
                }}
            </style>
        </body>
        </html>
        """
    
    def get_host_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö–æ—Å—Ç–∞"""
        try:
            import psutil
            from datetime import datetime
            
            return {
                "cpu_percent": psutil.cpu_percent(interval=1),
                "memory": dict(psutil.virtual_memory()._asdict()),
                "disk": dict(psutil.disk_usage('/')._asdict()),
                "network": dict(psutil.net_io_counters()._asdict()),
                "timestamp": datetime.now().isoformat(),
                "demo_mode": kvm_service.demo_mode
            }
        except ImportError:
            from datetime import datetime
            # Fallback –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return {
                "cpu_percent": 25.5,
                "memory": {"total": 8589934592, "used": 4294967296, "percent": 50.0},
                "disk": {"total": 1000000000000, "used": 500000000000, "percent": 50.0},
                "network": {"bytes_sent": 1024000, "bytes_recv": 2048000},
                "timestamp": datetime.now().isoformat(),
                "demo_mode": True,
                "note": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"
            }
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ KVM Web Platform (–ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä)")
    print(f"üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {os.uname().sysname} {os.uname().machine}")
    print(f"üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º: {kvm_service.demo_mode}")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ: {settings.DATA_DIR}")
    
    # –ü–æ—Ä—Ç –∏ —Ö–æ—Å—Ç
    host = "localhost"
    port = 8000
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = HTTPServer((host, port), KVMWebHandler)
    
    print(f"\nüåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}")
    print("üìñ API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/api/")
    print("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–ú: http://localhost:8000/")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    def open_browser():
        import time
        time.sleep(2)
        try:
            webbrowser.open(f"http://{host}:{port}")
            print("üåç –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        except:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    threading.Thread(target=open_browser, daemon=True).start()
    
    try:
        print("\nüî• –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        server.shutdown()
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
