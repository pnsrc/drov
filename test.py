#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç KVM Web Platform
"""

import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent))

def test_kvm_service():
    """–¢–µ—Å—Ç KVM —Å–µ—Ä–≤–∏—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KVM —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from app.services.kvm_service import KVMService
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        kvm = KVMService()
        
        print(f"‚úÖ KVM —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω (–¥–µ–º–æ-—Ä–µ–∂–∏–º: {kvm.demo_mode})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –í–ú
        vms = kvm.get_all_vms()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –í–ú: {len(vms)} —à—Ç.")
        
        for vm in vms:
            print(f"   üì¶ {vm['name']} - {vm['status']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –í–ú
        if vms:
            vm_name = vms[0]["name"]
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –í–ú '{vm_name}'...")
            
            # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞
            result = kvm.start_vm(vm_name)
            print(f"   ‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫: {result['message']}")
            
            # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            result = kvm.stop_vm(vm_name)
            print(f"   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: {result['message']}")
            
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            result = kvm.restart_vm(vm_name)
            print(f"   üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {result['message']}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã KVM —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è KVM —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from app.core.config import settings
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   üìÇ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {settings.BASE_DIR}")
        print(f"   üíæ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {settings.DATA_DIR}")
        print(f"   üíø –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ISO: {settings.ISO_STORAGE_PATH}")
        print(f"   üñ•Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –í–ú: {settings.VM_STORAGE_PATH}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
        if Path(settings.DATA_DIR).exists():
            print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
        else:
            print("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_demo_data():
    """–¢–µ—Å—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        demo_file = Path("data/demo_vms.json")
        if demo_file.exists():
            with open(demo_file, encoding="utf-8") as f:
                demo_vms = json.load(f)
            
            print(f"‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(demo_vms)} –í–ú")
            for vm in demo_vms:
                print(f"   üì¶ {vm['name']} - {vm['status']}")
        else:
            print("‚ö†Ô∏è  –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ISO —Ñ–∞–π–ª—ã
        iso_dir = Path("data/images/iso")
        if iso_dir.exists():
            iso_files = list(iso_dir.glob("*.iso"))
            print(f"‚úÖ ISO —Ñ–∞–π–ª—ã: {len(iso_files)} —à—Ç.")
            for iso in iso_files:
                print(f"   üíø {iso.name}")
        else:
            print("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ISO –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ KVM Web Platform\n")
    
    tests = [
        test_config,
        test_demo_data,
        test_kvm_service
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤: {passed}/{total} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("  python3 main.py")
        print("  –∏–ª–∏")
        print("  ./start.sh")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
